1. Fix refresh after add new point 
2. Add checkbox "Only my galleries"
3. Check groups rights for editor group
4. For delete operations in db shoul be transaction
5. Add new image point
6. edit image point
7. edit next image
8. scroll of listview of decriptions of image
9. uncomment in nextImageEditDialog //mastactva.refreshNextImage()
** 10. translate interface into belarus
** 11. Prepare program-ish strings to translation
** 12. Add internalization to the options dialog
13. Edit image point errors
14. Add warning messages for effect actions
15. document that is always used json representation of object id

* 17. Add ShaderAnalyze class

    * build vector of content type trim(line) == "" before a "\n" and a position of a "\n"
    * build Comments classes by comments positions just /* and */
    * extract lines coresponding to a comment /*< to prev none empty line just /* to next none empty line
    * analyze comments lines
    * extract comment type
        * @shader
        * @argument
    * extract comments params
        @shader
            * @description  // if none then all comment is a description
        @argument
            * @type         // from lines corresponding to a comment
            * @name         // from lines corresponding to a comment
            * @defaultvalue // from comment
            * @description  // from comment

    * let`s extract all @... fields and extract extra fields by comment type from corresponding lines
        @(/s+)w+([^@])* name->value
    * and for comment type will be subclasses that analyse corresponding line and extract extra params

* 18. While add new shader opeartion MastactvaAPI should return @shader.@description

    QByteArray shaderData;
    ShaderAnalyze sa;
    sa.analyze(shaderData);
    const auto &comment = sa.findComment("shader")
    comment.find("description")

* 19. add verify for shader effect post to not add shader of existing type
* 20. test description substraction from a shader code
* 21. add action: add existing shader
* 16. NetAPI function loadFile(const QString &fileURL_, const QString &fileHash_, const QString &cashingPath_)
* 23. add progress for list of file downloads
* 22. add action: refresh arguments

24. test cascade delete of effect, shader, argument, argument set and so on (db support is added)
* 25. Implement effect info retry for openglquizimage code
*    1) retry shaders or use default shaders
*    2) retry arguments
*    3) retry values or default values of arguments
*    4) set arguments values
26. debug QuizImage with Effect and EffectArgSet properties
* 27. implement demo qml scripts
*     * implement dialog to choose images from galleries
*     * implement demo control
* 28. implement test gallery
* 29. implement ImagePointEffect
* 30. fix bug of removing shader files, may be will not delete shaders at all
31. implement effect list select for a next image
32. fix effect edit bugs with lists
33. fix effect edit view bugs
34. implement test gallery #2
* 35. implement texture matrix move effects (swipe left, swipe right, swipe ip, swipe down)
36. implement texture matrix effect -- resize image (0..0.8) mix (0.8..1)
37. remove duplications of qml components, better to move component at separate file
38. remove duplications of loadChildren loadList functions in Model.h
* 39. auto download sgaders and images
* 40. fix ServerFiles to not start download of same item in parrallel, just subscribe to informate on first download
41. test geometry 
* 42. simple test app
43. add date to the shader load information. or possibility to view shader
44. add clock shader -- possibly it is too difficult
45. fix bugs, test app
46. add LUA scripting, so can be used step geomery generation, initialization functions
47. add textures to effect artefacts
48. don`t upload effects every time





