1. Fix refresh after add new point 
2. Add checkbox "Only my galleries"
3. Check groups rights for editor group
4. For delete operations in db shoul be transaction
5. Add new image point
6. edit image point
7. edit next image
8. scroll of listview of decriptions of image
9. uncomment in nextImageEditDialog //mastactva.refreshNextImage()
** 10. translate interface into belarus
** 11. Prepare program-ish strings to translation
** 12. Add internalization to the options dialog
13. Edit image point errors
14. Add warning messages for effect actions
15. document that is always used json representation of object id

* 17. Add ShaderAnalyze class

    * build vector of content type trim(line) == "" before a "\n" and a position of a "\n"
    * build Comments classes by comments positions just /* and */
    * extract lines coresponding to a comment /*< to prev none empty line just /* to next none empty line
    * analyze comments lines
    * extract comment type
        * @shader
        * @argument
    * extract comments params
        @shader
            * @description  // if none then all comment is a description
        @argument
            * @type         // from lines corresponding to a comment
            * @name         // from lines corresponding to a comment
            * @defaultvalue // from comment
            * @description  // from comment

    * let`s extract all @... fields and extract extra fields by comment type from corresponding lines
        @(/s+)w+([^@])* name->value
    * and for comment type will be subclasses that analyse corresponding line and extract extra params

* 18. While add new shader opeartion MastactvaAPI should return @shader.@description

    QByteArray shaderData;
    ShaderAnalyze sa;
    sa.analyze(shaderData);
    const auto &comment = sa.findComment("shader")
    comment.find("description")

* 19. add verify for shader effect post to not add shader of existing type
* 20. test description substraction from a shader code
* 21. add action: add existing shader
* 16. NetAPI function loadFile(const QString &fileURL_, const QString &fileHash_, const QString &cashingPath_)
* 23. add progress for list of file downloads
* 22. add action: refresh arguments

24. test cascade delete of effect, shader, argument, argument set and so on (db support is added)
* 25. Implement effect info retry for openglquizimage code
*    1) retry shaders or use default shaders
*    2) retry arguments
*    3) retry values or default values of arguments
*    4) set arguments values
26. debug QuizImage with Effect and EffectArgSet properties
* 27. implement demo qml scripts
*     * implement dialog to choose images from galleries
*     * implement demo control
* 28. implement test gallery
* 29. implement ImagePointEffect
* 30. fix bug of removing shader files, may be will not delete shaders at all
31. implement effect list select for a next image
32. fix effect edit bugs with lists
33. fix effect edit view bugs
34. implement test gallery #2
* 35. implement texture matrix move effects (swipe left, swipe right, swipe ip, swipe down)
36. implement texture matrix effect -- resize image (0..0.8) mix (0.8..1)
37. remove duplications of qml components, better to move component at separate file
38. remove duplications of loadChildren loadList functions in Model.h
* 39. auto download sgaders and images
* 40. fix ServerFiles to not start download of same item in parrallel, just subscribe to informate on first download
41. test geometry 
* 42. simple test app
43. add date to the shader load information. or possibility to view shader
44. add clock shader -- possibly it is too difficult
45. fix bugs, test app
46. add LUA scripting, so can be used step geomery generation, initialization functions
47. add textures to effect artefacts
* 48. don`t upload effects every time
* 49. init in ImagePointEffecEdittDialog correctly all return value. fix bug click ok with not selecting items
* 50. fix model size // -- fixed model do not uninitialization
* 51. add load list indicators
* 52. add prompts for remove actions // for effect remove actions -- all new actions
53. fix refresh arguments bug (find root case and fix it). not always starts download progress, and refresh button isn`t always enabled
54. add DataSource that contains way to the DB and to the NetAPI
* 55. add app to download data from server to the DB
* 57. add DB get requests
* 58. add DB view get requests
* 59. add DB update requests
60. WARNING the MastactvaAPI two instances
61. fix two instances of MastactvaAPI
62. test memory leaks for editor and quiz
* 63. add sort modes to the client code

procedure params in the django rest framework // Django REST Framework - pass extra parameter to actions
https://stackoverflow.com/questions/50425262/django-rest-framework-pass-extra-parameter-to-actions

- 64. check warnings
* 65. add nullptr check in base classes (Layout)
. 66. add editor user download of db (just versions of the current editor + may be with new galleries to test editors current galleries)
67. how to test galleries for one editor?
68. "TODO: find way to upload images of gallery when it is required" // ImageModel *Gallery::createImages()
* 69. procedure tables
* 70. remove g_procedureDefaultAPI
71. add auto generation of galleries
72. effects packet for update
73. mobile data zip generation
74. shaders/effect artefacts list. add/edit/view/del/replace/depended effects
75. add model ArtefctParamSetModel, ArtefactParamModel, TranslateModel
76. get pack of mobile data after download
77. get pack of effects after download
78. upload/download/update effects at the server
79. artefacts view form part, view text of shaders, images
80. multipass drawing (index)
* 81. add arg storage qualifiers (attribute, uniform)
82. update models to be equal to db changes
83. for galleries calculate point_to_pass automaticaly. collect all questions of galllery and sum value
    may be do it in the edit dialog? so that editor can choose value of toughteness of gallery
84. check if there is any question that can be pass (not enough points of answers)
85. add independent view for all time living objects (artefacts and so on) (detail is 74)
    also EffectObjectInfo
86. formulate arguments' of effects strategy
87. auto params:
    1) compare images
    *1.1) get valid points
    *    1.1.1) formulate better image characteristics
    *    1.1.2) find base points
    *    1.1.3) image preprocess
    *    1.1.4) optimize image preprocess parameters (maybe, auto calculations)
    * 1.2) match all elements
    * 1.3) build groups (with homogr and without)
    * 1.4) select groups, grow groups
    * 1.5) use gallery's most likely elements to detect
    * 1.5.1) try lines approach (build homograph transfrom)
    * 1.5.2) try match of key rect areas
    1.6) simplify rect finding (just all meaning rects)
    1.7) build utilities those can be used from GUI
* 88. rename ImageSource (as now it is also and artefact, not only images)
* 89. add wavefront obj format
90. fix running effects
* 91. add texture arguments

LUA:
- if lua code depends on renderXXX variables than update drawing data every time of varibales are changed
  if not then just use drawing data generated once and change values of render arguments
- signals on changing? of variables?


92. refactoring
93. +,+,+ tests, unit tests
94. test for con
95. restore effects

96. fix list actions
97. add mock tests for local data api

98. runtime variables update
    use shared variable to get data (different from calculations at prepare)
    address variables by name (compiler time find out required variables?)
    step -- variables -- runtime updates (may require more variables than shaders)
    but can update only local variables (it is update for local state)
    but also may update variables required by other calculations

    calculation -- arg in (result -- all other args)

    so calculate artefact - requires arguments
    can get them by name 
    can get all other by name to set (get?)
    ok input variables -- are just added to list of all variables we can get/set any
    and add new variables (return)
    get/set -- through interface

    runtime staff can't add new variables
    ok -- need a different type for runtime staff (ignore return)

99. update flag for variable
    update flag for runtime calculation
    - set update flag for calculation
    - clear update flag for variables
    - process need to update (one time)
    - set update flag for calcalation
    - clear update float for variables
    - process need to update (just one time)
    - if nothing is required to update exit

100. effects addin, compiler time information about types arguments
     and extract effect info to data object not vice vers
     to build effect at compiler time maximum
     to add calculation staff
     extend drawing_data to support dynamic data
     not only static with specific values
     some state machine? if we set the value then recalculate values?
     some staff for interaction maybe? -- no

     just addin to process required effects and to get information from it
     for editor app.

101. c++ version for release (addin version)
102. absl for c++ version for release
103. add effect runtime lua scripts
104. sync new windows with old/test new
105. CI
    + Master; build agent
    * qt build pipeline (tests, editor)
    * qt test pipeline (gtests)
    * gates
    * artefactory
    * add import from db
    * add game build
    * add android build
106. adapt to cmake
    * adapt project
    * migrate to docker // https://www.qt.io/blog/docker-builds-from-qtcreator
107. get arguments from lua code and shaders code
108. test image artefacts save to db (URL not file)
109. search (highlight/select) current artefact
110. buttons for artefact edit
111. arguments in effects (from effects object)
112. arguments in UI (select/highlight/follow)
113. export effect
114. import effects
115. compress export
116. export game data in compressed archive
117. effect update arguments while running effects lua scripts
    * lua methods to pass arguments to the plugins
    * plugins update of the arguments
    * call to plugins methods
    - function name as pluging C++ functions
    - arguments as QMap<QString, QVariant>
      - QVariant -- QString, QList<double>
* 118. add copy of data from models
119. effect lists
* 120. refresh arg set, arg set values

