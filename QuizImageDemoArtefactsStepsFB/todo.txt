+ 1. add arguments and argument sets
2. add argument to select arg set
3. add effect get effect data and arg set current item
+ 4. fix tests


arguments from concrete arg set
DrawingDataEffect::m_effectArgSetsData
    DrawingDataEffectArg
        m_objectArtefactId
        m_id // EffectArgData

    DrawingDataEffectArgSet
        DrawingDataEffectArgSet::m_effectArgValuesData
            DrawingDataEffectArgValue
                m_argId // -> DrawingDataEffectArg.m_id -> m_objectArtefactId

                DrawingDataEffectArgValue::m_effectArgData
                    IDrawingDataArtefactArg


if we fill first?
or just replace default value? -- maybe, it will be used latter
or first? -- ok, it just from the start is used


arguments for lua scripts has artefact types:
ArtefactTypeEn::scriptLua
ArtefactTypeEn::scriptLuaRuntime

5. variant of ArtefactTypeEn::argumentReference to build multistep effects

Lua add functions:
* addArgSet(effect id, easing type, description) -> {effect arg set id, ...}
* getEffectArgSetArguments(effect id) -> {[effect arg id, ...]}
* setArgSetArgumentValue(effect arg set id, effect arg id, value)
* getCurrentEffect()
    -> {
        effect id,
        effect name,
        effect description (?)
        }
* findObject(object name, object step index)
    -> {
        object id,
        object info id,
        object name,
        object step index,
        }
* findObjectArtefact(
    object name,
    object step index,
    artefact name,
    artefact step index)
    -> {
        object id,
        object info id,
        object name,
        object step index,
        object artefact id,
        object artefact step index,
        artefact id,
        artefact name,
        artefact file name,
        artefact file hash,
        artefact type id,
        }
* getFromImageUrl() -> url
* getToImageUrl() -> url

